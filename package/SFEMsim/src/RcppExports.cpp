// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// coefsChebApprox
Eigen::VectorXd coefsChebApprox(Rcpp::Function h_, int M, double a, double b, int verbose);
RcppExport SEXP _SFEMsim_coefsChebApprox(SEXP h_SEXP, SEXP MSEXP, SEXP aSEXP, SEXP bSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type h_(h_SEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(coefsChebApprox(h_, M, a, b, verbose));
    return rcpp_result_gen;
END_RCPP
}
// prodChebDecompVec
Eigen::MatrixXd prodChebDecompVec(Eigen::SparseMatrix<double> S, Eigen::VectorXd Coefs, double a, double b, Eigen::MatrixXd V);
RcppExport SEXP _SFEMsim_prodChebDecompVec(SEXP SSEXP, SEXP CoefsSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type S(SSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Coefs(CoefsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(prodChebDecompVec(S, Coefs, a, b, V));
    return rcpp_result_gen;
END_RCPP
}
// evalCheb
Eigen::VectorXd evalCheb(Eigen::VectorXd x, int n, double a, double b);
RcppExport SEXP _SFEMsim_evalCheb(SEXP xSEXP, SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(evalCheb(x, n, a, b));
    return rcpp_result_gen;
END_RCPP
}
// evalChebDecompPts
Eigen::ArrayXd evalChebDecompPts(Eigen::ArrayXd x, Eigen::ArrayXd Coefs, double a, double b);
RcppExport SEXP _SFEMsim_evalChebDecompPts(SEXP xSEXP, SEXP CoefsSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type Coefs(CoefsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(evalChebDecompPts(x, Coefs, a, b));
    return rcpp_result_gen;
END_RCPP
}
// evalChebDecompMat
Eigen::SparseMatrix<double> evalChebDecompMat(Eigen::SparseMatrix<double> S, Eigen::VectorXd Coefs, double a, double b);
RcppExport SEXP _SFEMsim_evalChebDecompMat(SEXP SSEXP, SEXP CoefsSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type S(SSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Coefs(CoefsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(evalChebDecompMat(S, Coefs, a, b));
    return rcpp_result_gen;
END_RCPP
}
// matFEM2d
Rcpp::List matFEM2d(Eigen::ArrayXXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::ArrayXXd& triMetricMat, Rcpp::Nullable<Rcpp::NumericVector > triPotCoeffs, Rcpp::Nullable<Rcpp::NumericMatrix > triDiffCoeffs, bool massLumping);
RcppExport SEXP _SFEMsim_matFEM2d(SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP triMetricMatSEXP, SEXP triPotCoeffsSEXP, SEXP triDiffCoeffsSEXP, SEXP massLumpingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type triMetricMat(triMetricMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector > >::type triPotCoeffs(triPotCoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix > >::type triDiffCoeffs(triDiffCoeffsSEXP);
    Rcpp::traits::input_parameter< bool >::type massLumping(massLumpingSEXP);
    rcpp_result_gen = Rcpp::wrap(matFEM2d(nodeMat, triMat, triMetricMat, triPotCoeffs, triDiffCoeffs, massLumping));
    return rcpp_result_gen;
END_RCPP
}
// matFEM1d
Rcpp::List matFEM1d(Eigen::ArrayXXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::ArrayXXd& triMetricMat, Rcpp::Nullable<Rcpp::NumericVector > triPotCoeffs, Rcpp::Nullable<Rcpp::NumericMatrix > triDiffCoeffs, bool massLumping);
RcppExport SEXP _SFEMsim_matFEM1d(SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP triMetricMatSEXP, SEXP triPotCoeffsSEXP, SEXP triDiffCoeffsSEXP, SEXP massLumpingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type triMetricMat(triMetricMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector > >::type triPotCoeffs(triPotCoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix > >::type triDiffCoeffs(triDiffCoeffsSEXP);
    Rcpp::traits::input_parameter< bool >::type massLumping(massLumpingSEXP);
    rcpp_result_gen = Rcpp::wrap(matFEM1d(nodeMat, triMat, triMetricMat, triPotCoeffs, triDiffCoeffs, massLumping));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SFEMsim_coefsChebApprox", (DL_FUNC) &_SFEMsim_coefsChebApprox, 5},
    {"_SFEMsim_prodChebDecompVec", (DL_FUNC) &_SFEMsim_prodChebDecompVec, 5},
    {"_SFEMsim_evalCheb", (DL_FUNC) &_SFEMsim_evalCheb, 4},
    {"_SFEMsim_evalChebDecompPts", (DL_FUNC) &_SFEMsim_evalChebDecompPts, 4},
    {"_SFEMsim_evalChebDecompMat", (DL_FUNC) &_SFEMsim_evalChebDecompMat, 4},
    {"_SFEMsim_matFEM2d", (DL_FUNC) &_SFEMsim_matFEM2d, 6},
    {"_SFEMsim_matFEM1d", (DL_FUNC) &_SFEMsim_matFEM1d, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_SFEMsim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
